from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
from aiogram.types import ParseMode, ContentTypes
from aiogram.utils.markdown import bold, code, italic, text

from config import TOKEN
import keyboard
import func



bot = Bot(token=TOKEN)
dp = Dispatcher(bot)


@dp.message_handler(lambda message: func.chat_id_found(message.chat.id) == False, commands=['start'])
async def welcome_message(message: types.Message):
    func.chat_id_add(message.chat.id)
    func.column_add(message.chat.id, "state", 1234)
    await message.reply("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n–ü–µ—Ä–µ–¥ –í–∞–º–∏ *—Å–µ—Ä–≤–∏—Å –¥–æ—Å—Ç–∞–≤–∫–∏ –µ–¥—ã –Ω–∞ –¥–æ–º*.", reply = False, parse_mode=ParseMode.MARKDOWN)
    await full_name_request(message)
    
@dp.message_handler(lambda message: func.column_take(message.chat.id, "state") == 1234, commands=['start'])
async def full_name_request(message: types.Message):
    full_name = func.check_full_name(message.chat.first_name + " " + message.chat.last_name) if "last_name" in message.chat else None
    if full_name:
        first_name, last_name = full_name
        await message.reply('–í—ã *%s %s*?\n–ï—Å–ª–∏ –∏–º—è-—Ñ–∞–º–∏–ª–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –Ω–µ–≤–µ—Ä–Ω–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, *–Ω–∞–ø–∏—à–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ* –≤ —Ñ–æ—Ä–º–∞—Ç–µ: *–ò–º—è –§–∞–º–∏–ª–∏—è*.\n–ï—Å–ª–∏ –≤—Å–µ –≤–µ—Ä–Ω–æ, –Ω–∞–∂–º–∏—Ç–µ "–î–∞–ª–µ–µ" –ø–æ–¥ —ç—Ç–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º\n' % (first_name, last_name), reply = False, parse_mode=ParseMode.MARKDOWN, reply_markup=keyboard.inline("–î–∞–ª–µ–µ", "#setstate@1235"))
    else:
        await message.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, *–Ω–∞–ø–∏—à–∏—Ç–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é* –≤ —Ñ–æ—Ä–º–∞—Ç–µ: *–ò–º—è –§–∞–º–∏–ª–∏—è*.\n', reply = False, parse_mode=ParseMode.MARKDOWN)

@dp.message_handler(lambda message: func.column_take(message.chat.id, "state") == 1235, commands=['start'])
async def phone_number_again(message: types.Message):
    await message.reply("–î–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –Ω–∞ –≤—Å–µ—Ö —ç—Ç–∞–ø–∞—Ö —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –º–æ–∂–µ—Ç –ø–æ–Ω–∞–¥–æ–±–∏—Ç—å—Å—è –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É \"*–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º*\".", parse_mode=ParseMode.MARKDOWN, reply_markup = keyboard.phone_number("–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º üì≤"), reply = False)

@dp.message_handler(lambda message: func.column_take(message.chat.id, "state") == 1236, commands=['start'])
async def welcome_again(message: types.Message):
    await message.reply("–†–∞–¥ —Å–Ω–æ–≤–∞ –í–∞—Å –≤–∏–¥–µ—Ç—å, %s!\n–ü–µ—Ä–µ–¥ –í–∞–º–∏ *—Å–µ—Ä–≤–∏—Å –¥–æ—Å—Ç–∞–≤–∫–∏ –µ–¥—ã –Ω–∞ –¥–æ–º*." % (func.column_take(message.chat.id, "first_name")), reply = False, parse_mode=ParseMode.MARKDOWN)

# @dp.message_handler(commands=['help'])
# async def process_help_command(message: types.Message):
#     await message.reply("–ù–∞–ø–∏—à–∏ –º–Ω–µ —á—Ç–æ-–Ω–∏–±—É–¥—å, –∏ —è –æ—Ç–ø—Ä–∞–≤–ª—é —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç —Ç–µ–±–µ –≤ –æ—Ç–≤–µ—Ç!")

@dp.message_handler(content_types=ContentTypes.CONTACT)
async def get_contact(message: types.Message):
    if func.column_take(message.chat.id, "state") != 1235: return 0
    func.column_add(message.chat.id, "state", 1236)
    func.column_add(message.chat.id, "phone", message.contact["phone_number"])
    await bot.send_message(message.chat.id, "–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é! –¢–µ–ø–µ—Ä—å –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–µ—Ä–≤–∏—Å–æ–º!", reply_markup = keyboard.remove())



@dp.message_handler(lambda message: func.column_take(message.chat.id, "state") == 1234)
async def text_message1(message: types.Message):
    full_name = func.check_full_name(message.text)
    if full_name:
        first_name, last_name = full_name
        func.column_add(message.chat.id, "first_name", first_name)
        func.column_add(message.chat.id, "last_name", last_name)
        await take_phone(message)
    else:
        await bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

@dp.message_handler()
async def text_message(message: types.Message):
    await bot.send_message(message.chat.id, message.text, reply_markup=keyboard.reply([["üìÑ –ú–µ–Ω—é", "üç± –ö–æ—Ä–∑–∏–Ω–∞"], ["üë§ –ü—Ä–æ—Ñ–∏–ª—å", "üí¨ –ü–æ–º–æ—â—å"]] ))


@dp.callback_query_handler(lambda callback_query: "#setstate@1235" in callback_query.data and func.column_take(message.chat.id, "state") == 1234)
async def take_phone_callback(callback: types.CallbackQuery):
    message = callback.message; await callback.answer()
    full_name = func.check_full_name(message.chat.first_name + " " + message.chat.last_name)
    first_name, last_name = full_name
    func.column_add(message.chat.id, "first_name", first_name)
    func.column_add(message.chat.id, "last_name", last_name)
    await take_phone(message)

async def take_phone(message: types.Message):
    func.column_add(message.chat.id, "state", 1235)
    await message.reply("–î–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –Ω–∞ –≤—Å–µ—Ö —ç—Ç–∞–ø–∞—Ö —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –º–æ–∂–µ—Ç –ø–æ–Ω–∞–¥–æ–±–∏—Ç—å—Å—è –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É \"*–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º*\".", parse_mode=ParseMode.MARKDOWN, reply_markup = keyboard.phone_number("–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º üì≤"), reply = False)


@dp.callback_query_handler()
async def any_callback(callback: types.CallbackQuery):
    message = callback.message
    user_id, message_id = message.chat.id, message.message_id
    await bot.send_message(user_id, "callback: " + callback.data)

if __name__ == '__main__':
    executor.start_polling(dp)
